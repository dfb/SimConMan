use("Data/Scripts/Includes/SimFuncs.chai");

// To reduce network overhead, we assign an ID to each variable we intend to send to the client,
// so each variable or sim event name that will be used needs to be listed here
global varNames = [
    "Aircraft.Controls.Engine.Throttle",
    "Aircraft.Engine.1.Piston.RPMPercent",
    "Aircraft.Input.GearLever.Down",
    "Aircraft.Input.Pitch",
    "Aircraft.Input.Roll",
    "Aircraft.Position.Airspeed.Indicated",
    "Aircraft.Position.Airspeed.True",
    "Aircraft.Position.Altitude.Radar",
    "Aircraft.Position.Altitude.True",
    "Aircraft.Position.Bank.Value",
    "Aircraft.Position.GroundSpeed.Value",
    "Aircraft.Position.Latitude",
    "Aircraft.Position.Longitude",
    "Aircraft.Position.VerticalSpeed.Value",
    "Aircraft.Properties.Dynamics.StallAlpha",
    "Aircraft.Properties.Name",
    "Aircraft.Status.OnGround",
    "Aircraft.Status.PitotIce.Percent",
    "Aircraft.Surfaces.Aileron.Left.Percent",
    "Aircraft.Surfaces.Elevator.Trim.Angle",
    "Aircraft.Wheel.Center.Rotation.RPM",
    "SimState.Paused",
    "Aircraft.Velocity.Rotation.Local.X",
    "Aircraft.Velocity.Rotation.Local.Y",
    "Aircraft.Velocity.Rotation.Local.Z",
    "World.Wind.Velocity.Local.Y",
    "Aircraft.Dynamics.Alpha"
]
global varToIDMap = Map() // name from varNames --> ID as a string

global needReset = true;
global inPort = 62000;
global inAddr = createNetworkAddress("127.0.0.1", inPort);
global outAddr = createNetworkAddress("127.0.0.1", 61000);
global onDat;
global udp = UDPSocket();
global outMessage = "";
global messages = [];

def onUDPMessage(addr, msg)
{
    if (msg == "RES:1")
    {
        print("client wants reset");
        needReset = true;
    }
}

def SendMsg(msg)
{
    auto m = msg; // we get some error without this :(
    udp.sendData(outAddr, m);
}

def onStart()
{
    // create the mapping from var name to ID
    varToIDMap.clear();
    for (varName : varNames.range())
    {
        varToIDMap[varName] = varToIDMap.size().to_string();
    }

	onDat := udp.onMessageReceived(onUDPMessage);
    udp.listenOn(inPort);
    udp.startListening();
}

global trackedSValues = Map(); // string values
// checks to see if the given string variable has changed and, if so,
// records its new value and sends a network event indicating that it changed
def checkForSChanges(varName)
{
    var varID = varToIDMap[varName];
    if (varToIDMap.count(varName) == 0)
    {
        print("ERROR: " + varName + " is not a registered variable");
        return;
    }

    var cur = getVarString(varName);
    var changed = false;
    if (trackedSValues.count(varName) == 0)
    {   // first use
        changed = true;
    }
    else
    {
        var prev = trackedSValues[varName];
        if (cur != prev)
        {
            changed = true;
        }
    }

    if (changed)
    {
        trackedSValues[varName] = cur;
        SendMsg("VS:" + varID + "=" + cur);
    }
}

global trackedFValues = Map(); // float values
// checks to see if the given float variable has changed by more than the given amount and, if so,
// records its new value and sends a network event indicating that it changed
def checkForFChanges(varName, epsilon)
{
    var varID = varToIDMap[varName];
    if (varToIDMap.count(varName) == 0)
    {
        print("ERROR: " + varName + " is not a registered variable");
        return;
    }

    var cur = getVarFloat(varName);
    var changed = false;
    if (trackedFValues.count(varName) == 0)
    {   // first use
        changed = true;
    }
    else
    {
        var prev = trackedFValues[varName];
        var diff = (prev - cur); // TODO: is there an abs function available?
        if (diff < 0)
        {
            diff = -1.0 * diff;
        }

        if (diff > epsilon)
        {
            changed = true;
        }
    }

    if (changed)
    {
        trackedFValues[varName] = cur;
        SendMsg("VF:" + varID + "=" + cur.to_string());
    }
}

def onGraphicsFrame()
{
    if (needReset)
    {   // respond to client's request for a reset
        needReset = false;
        SendMsg("RES:1");

        // on reset, we send our variable mapping info
        for (item : varToIDMap.range())
        {
            SendMsg("DEF:" + item.first() + "=" + item.second());
        }

        // trigger resend of everything
        trackedFValues.clear();
        trackedSValues.clear();
    }

    // pump incoming messages, send outgoing messages
    udp.processNotifications();
    checkForFChanges("Aircraft.Status.OnGround", 0.25);
    checkForFChanges("Aircraft.Input.Pitch", 0.25);
    checkForFChanges("Aircraft.Input.Roll", 0.25);
    checkForFChanges("Aircraft.Position.Airspeed.Indicated", 0.5);
    checkForFChanges("Aircraft.Position.Airspeed.True", 0.5);
    checkForFChanges("Aircraft.Position.GroundSpeed.Value", 0.5);
    checkForFChanges("Aircraft.Wheel.Center.Rotation.RPM", 0.5);
    checkForFChanges("SimState.Paused", 0.5);
    checkForFChanges("Aircraft.Properties.Dynamics.StallAlpha", 0.01);
    checkForFChanges("Aircraft.Status.PitotIce.Percent", 0.5);
    checkForFChanges("Aircraft.Position.Latitude", 0.001);
    checkForFChanges("Aircraft.Position.Longitude", 0.001);
    checkForSChanges("Aircraft.Properties.Name");
    
    checkForFChanges("Aircraft.Position.Altitude.Radar", 1);
    checkForFChanges("Aircraft.Position.Altitude.True", 1);
    checkForFChanges("Aircraft.Position.VerticalSpeed.Value", 1);
    checkForFChanges("Aircraft.Input.GearLever.Down", 1);
    checkForFChanges("Aircraft.Engine.1.Piston.RPMPercent", 1);
    checkForFChanges("Aircraft.Controls.Engine.Throttle", 1);
    checkForFChanges("Aircraft.Position.Bank.Value", 0.1);
    checkForFChanges("Aircraft.Surfaces.Aileron.Left.Percent", 1);
    checkForFChanges("Aircraft.Surfaces.Elevator.Trim.Angle", 0.1);
    checkForFChanges("Aircraft.Velocity.Rotation.Local.X", 0.1);
    checkForFChanges("Aircraft.Velocity.Rotation.Local.Y", 0.1);
    checkForFChanges("Aircraft.Velocity.Rotation.Local.Z", 0.1);
    checkForFChanges("World.Wind.Velocity.Local.Y", 1);
    checkForFChanges("Aircraft.Dynamics.Alpha", 0.1);
}

def onUIFrame()
{
	auto& ui = GetUI();
    ui.startWindow("FSForce");
    ui.inputString("Text", outMessage);
    ui.sameLine();
    if(ui.button("Send"))
    {
        udp.sendData(outAddr, outMessage);
        messages.push_back("You: " +outMessage);
        outMessage = "";
    }
    
    for (auto i = 0; i < messages.size(); ++i)
    {
        ui.text(messages[i]);
    }
    
    ui.endWindow();
}
